rule integration_prepare:
    input:
        adata  = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="file"),
        script = "scripts/runPP.py"
    output:
        cfg.ROOT / "{scenario}/prepare/{scaling}/{hvg}/adata_pre.{prep}"
        #join_path(cfg.get_filename_pattern("prepare", "directory_by_setting"), "adata_pre.{prep}")
    message:
        """
        Preparing adata
        wildcards: {wildcards}
        parameters: {params}
        output: {output}
        """
    params:
        batch_key = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="batch_key"),
        hvgs      = lambda wildcards: cfg.get_feature_selection(wildcards.hvg),
        scale     = lambda wildcards: "-s" if wildcards.scaling == "scaled" else "",
        rout      = lambda wildcards: "-r" if wildcards.prep == "RDS" else "",
        seurat    = lambda wildcards: "-l" if wildcards.prep == "RDS" else "",
        cmd       = f"conda run -n {cfg.py_env} python"
    benchmark:
        str(cfg.ROOT / "{scenario}/prepare/{scaling}/{hvg}/prep_{prep}.benchmark")
        #join_path(cfg.get_filename_pattern("prepare", "directory_by_setting"), "prep_{prep}.benchmark")
    shell:
        """
        {params.cmd} {input.script} -i {input.adata} -o {output} -b {params.batch_key} \
        --hvgs {params.hvgs} {params.scale} {params.rout} {params.seurat}
        """


def get_celltype_option_for_integration(wildcards):
    if cfg.get_from_method(wildcards.method, "use_celltype"):
        label_key = cfg.get_from_scenario(wildcards.scenario, key="label_key")
        return f"-c {label_key}"
    return ""


# ------------------------------------------------------------------------------
# Python specific integration rule.
# TODO: decorate with some detailed information
# ------------------------------------------------------------------------------
rule integration_run_python:
    input:
        adata = lambda w: expand(rules.integration_prepare.output, **w, prep="h5ad"),
        pyscript = "scripts/runIntegration.py"
    output:
        cfg.ROOT / "{scenario}/integration/{scaling}/{hvg}/{method}.h5ad"
        #cfg.get_filename_pattern("integration", "single", "h5ad")
    message:
        """
        Run {wildcards.method} on {wildcards.scaling} data
        feature selection: {wildcards.hvg}
        dataset: {wildcards.scenario}
        command: {params.cmd}
        hvgs: {params.hvgs}
        cell type option: {params.cell_type}
        """
    params:
        batch_key = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="batch_key"),
        cell_type = get_celltype_option_for_integration,
        hvgs      = lambda wildcards, input: cfg.get_hvg(wildcards, input.adata[0]),
        timing    = "-t" if cfg.timing else "",
        cmd       = f"conda run -n {cfg.py_env} python"
    benchmark:
        str(cfg.ROOT / "{scenario}/integration/{scaling}/{hvg}/{method}.h5ad.benchmark")
        #f'{cfg.get_filename_pattern("integration", "single", "h5ad")}.benchmark'
    shell:
        """
        {params.cmd} {input.pyscript} -i {input.adata} -o {output} \
	      -b {params.batch_key} --method {wildcards.method} {params.hvgs} {params.cell_type} \
	      {params.timing}
        """


# ------------------------------------------------------------------------------
# R specific integration rule.
# TODO: decorate with some detailed information
# ------------------------------------------------------------------------------
rule integration_run_r:
    input:
        adata  = lambda w: expand(rules.integration_prepare.output, **w, prep="RDS"),
        rscript = "scripts/runMethods.R"
    output:
        cfg.ROOT / "{scenario}/integration/{scaling}/{hvg}/R/{method}.RDS"
        #cfg.get_filename_pattern("integration", "single", "rds")
    message:
        """
        Run {wildcards.method} on {wildcards.scaling} data
        feature selection: {wildcards.hvg}
        dataset: {wildcards.scenario}
        command: {params.cmd}
        hvgs: {params.hvgs}
        """
    params:
        batch_key = lambda wildcards: cfg.get_from_scenario(wildcards.scenario, key="batch_key"),
        hvgs      = lambda wildcards, input: cfg.get_hvg(wildcards, input.adata[0]),
        cmd       = f"conda run -n {cfg.r_env} Rscript",
        timing    = "-t" if cfg.timing else ""
    benchmark:
        str(cfg.ROOT / "{scenario}/integration/{scaling}/{hvg}/R/{method}.RDS.benchmark")
        #f'{cfg.get_filename_pattern("integration", "single", "rds")}.benchmark'
    shell:
        """
        {params.cmd} {input.rscript} -i {input.adata} -o {output} -b {params.batch_key} \
            --method {wildcards.method} {params.hvgs} {params.timing}
        """


# ------------------------------------------------------------------------------
# Simply converts the RDS files created by the R scripts to h5ad files for
# further processing with the metrics rule
# ------------------------------------------------------------------------------
rule convert_RDS_h5ad:
    input:
        i = rules.integration_run_r.output,
        #cfg.get_filename_pattern("integration", "single", "rds"),
        script = "scripts/runPost.py"
    output:
        cfg.ROOT / "{scenario}/integration/{scaling}/{hvg}/R/{method}.h5ad"
        #cfg.get_filename_pattern("integration", "single", "rds_to_h5ad")
    message:
        """
        Convert integrated data from {wildcards.method} into h5ad
        """
    params:
        cmd = f"conda run -n {cfg.conv_env} python"
    shell:
        """
        if [ {wildcards.method} == "conos" ]
        then
            {params.cmd} {input.script} -i {input.i} -o {output} -c
        else
            {params.cmd} {input.script} -i {input.i} -o {output}
        fi
        """


int_func, py_wildcards = cfg.get_all_wildcards(methods=cfg.get_all_python_methods())
rule integrated_python:
    input: expand(rules.integration_run_python.output, int_func, **py_wildcards)
    message: "Python integration methods"


int_func, r_wildcards = cfg.get_all_wildcards(methods=cfg.get_all_R_methods())
rule integrated_R:
    input: expand(rules.integration_run_r.output, int_func, **r_wildcards)
    message: "R integration methods"


rule integration:
    input:
        rules.integrated_python.input,
        rules.integrated_R.input
        #cfg.get_all_file_patterns("integration")
    message: "Integration done"
